/**\n * Auth User Store\n * 用户认证状态管理 - [stores][auth][auth_user_store]\n */\n\nimport { create } from 'zustand';\nimport { persist, createJSONStorage } from 'zustand/middleware';\nimport { authUserService } from '../../services/auth/auth_user_service';\nimport type { AuthUser, LoginRequest, RegisterRequest } from '../../types/auth';\n\ninterface AuthState {\n  // 状态\n  isAuthenticated: boolean;\n  user: AuthUser | null;\n  token: string | null;\n  refreshToken: string | null;\n  isLoading: boolean;\n  error: string | null;\n  \n  // 权限相关\n  roles: string[];\n  permissions: string[];\n  \n  // 操作方法\n  login: (credentials: LoginRequest) => Promise<boolean>;\n  register: (userData: RegisterRequest) => Promise<boolean>;\n  logout: () => void;\n  refreshAuth: () => Promise<boolean>;\n  updateProfile: (profileData: Partial<AuthUser>) => Promise<boolean>;\n  changePassword: (oldPassword: string, newPassword: string) => Promise<boolean>;\n  \n  // 权限检查方法\n  hasRole: (role: string) => boolean;\n  hasPermission: (permission: string) => boolean;\n  hasAnyRole: (roles: string[]) => boolean;\n  hasAnyPermission: (permissions: string[]) => boolean;\n  \n  // 内部方法\n  setUser: (user: AuthUser | null) => void;\n  setToken: (token: string | null) => void;\n  setLoading: (loading: boolean) => void;\n  setError: (error: string | null) => void;\n  clearAuth: () => void;\n  initializeAuth: () => Promise<void>;\n}\n\nexport const useAuthStore = create<AuthState>()(
  persist(\n    (set, get) => ({\n      // 初始状态\n      isAuthenticated: false,\n      user: null,\n      token: null,\n      refreshToken: null,\n      isLoading: false,\n      error: null,\n      roles: [],\n      permissions: [],\n\n      // 登录\n      login: async (credentials: LoginRequest): Promise<boolean> => {\n        set({ isLoading: true, error: null });\n        \n        try {\n          const response = await authUserService.auth_user_service_login(credentials);\n          \n          if (response.success && response.data) {\n            const { user, access_token, refresh_token } = response.data;\n            \n            set({\n              isAuthenticated: true,\n              user,\n              token: access_token,\n              refreshToken: refresh_token,\n              roles: user.roles || [],\n              permissions: user.permissions || [],\n              isLoading: false,\n              error: null\n            });\n            \n            // 设置axios默认headers\n            authUserService.auth_user_service_set_auth_header(access_token);\n            \n            return true;\n          }\n          \n          set({ \n            isLoading: false, \n            error: response.error?.message || '登录失败' \n          });\n          return false;\n          \n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : '登录失败';\n          set({ isLoading: false, error: errorMessage });\n          return false;\n        }\n      },\n\n      // 注册\n      register: async (userData: RegisterRequest): Promise<boolean> => {\n        set({ isLoading: true, error: null });\n        \n        try {\n          const response = await authUserService.auth_user_service_register(userData);\n          \n          if (response.success) {\n            set({ isLoading: false, error: null });\n            return true;\n          }\n          \n          set({ \n            isLoading: false, \n            error: response.error?.message || '注册失败' \n          });\n          return false;\n          \n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : '注册失败';\n          set({ isLoading: false, error: errorMessage });\n          return false;\n        }\n      },\n\n      // 登出\n      logout: () => {\n        // 调用API登出\n        authUserService.auth_user_service_logout().catch(console.error);\n        \n        // 清理本地状态\n        get().clearAuth();\n      },\n\n      // 刷新认证\n      refreshAuth: async (): Promise<boolean> => {\n        const { refreshToken } = get();\n        \n        if (!refreshToken) {\n          get().clearAuth();\n          return false;\n        }\n        \n        set({ isLoading: true });\n        \n        try {\n          const response = await authUserService.auth_user_service_refresh_token(refreshToken);\n          \n          if (response.success && response.data) {\n            const { access_token, refresh_token, user } = response.data;\n            \n            set({\n              token: access_token,\n              refreshToken: refresh_token,\n              user: user || get().user,\n              isLoading: false\n            });\n            \n            // 更新axios headers\n            authUserService.auth_user_service_set_auth_header(access_token);\n            \n            return true;\n          }\n          \n          // 刷新失败，清除认证\n          get().clearAuth();\n          return false;\n          \n        } catch (error) {\n          console.error('Token refresh failed:', error);\n          get().clearAuth();\n          return false;\n        }\n      },\n\n      // 更新用户资料\n      updateProfile: async (profileData: Partial<AuthUser>): Promise<boolean> => {\n        set({ isLoading: true, error: null });\n        \n        try {\n          const response = await authUserService.auth_user_service_update_profile(profileData);\n          \n          if (response.success && response.data) {\n            set({\n              user: response.data,\n              isLoading: false,\n              error: null\n            });\n            return true;\n          }\n          \n          set({ \n            isLoading: false, \n            error: response.error?.message || '更新失败' \n          });\n          return false;\n          \n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : '更新失败';\n          set({ isLoading: false, error: errorMessage });\n          return false;\n        }\n      },\n\n      // 修改密码\n      changePassword: async (oldPassword: string, newPassword: string): Promise<boolean> => {\n        set({ isLoading: true, error: null });\n        \n        try {\n          const response = await authUserService.auth_user_service_change_password({\n            old_password: oldPassword,\n            new_password: newPassword\n          });\n          \n          if (response.success) {\n            set({ isLoading: false, error: null });\n            return true;\n          }\n          \n          set({ \n            isLoading: false, \n            error: response.error?.message || '密码修改失败' \n          });\n          return false;\n          \n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : '密码修改失败';\n          set({ isLoading: false, error: errorMessage });\n          return false;\n        }\n      },\n\n      // 权限检查方法\n      hasRole: (role: string): boolean => {\n        const { roles } = get();\n        return roles.includes(role);\n      },\n\n      hasPermission: (permission: string): boolean => {\n        const { permissions } = get();\n        return permissions.includes(permission);\n      },\n\n      hasAnyRole: (roles: string[]): boolean => {\n        const { roles: userRoles } = get();\n        return roles.some(role => userRoles.includes(role));\n      },\n\n      hasAnyPermission: (permissions: string[]): boolean => {\n        const { permissions: userPermissions } = get();\n        return permissions.some(permission => userPermissions.includes(permission));\n      },\n\n      // 内部方法\n      setUser: (user: AuthUser | null) => {\n        set({ user });\n      },\n\n      setToken: (token: string | null) => {\n        set({ token });\n        if (token) {\n          authUserService.auth_user_service_set_auth_header(token);\n        }\n      },\n\n      setLoading: (isLoading: boolean) => {\n        set({ isLoading });\n      },\n\n      setError: (error: string | null) => {\n        set({ error });\n      },\n\n      clearAuth: () => {\n        set({\n          isAuthenticated: false,\n          user: null,\n          token: null,\n          refreshToken: null,\n          roles: [],\n          permissions: [],\n          error: null\n        });\n        \n        // 清除axios headers\n        authUserService.auth_user_service_clear_auth_header();\n      },\n\n      // 初始化认证状态\n      initializeAuth: async () => {\n        const { token, refreshToken } = get();\n        \n        if (!token) {\n          return;\n        }\n        \n        set({ isLoading: true });\n        \n        // 设置axios headers\n        authUserService.auth_user_service_set_auth_header(token);\n        \n        try {\n          // 验证当前token\n          const response = await authUserService.auth_user_service_get_current_user();\n          \n          if (response.success && response.data) {\n            set({\n              isAuthenticated: true,\n              user: response.data,\n              roles: response.data.roles || [],\n              permissions: response.data.permissions || [],\n              isLoading: false\n            });\n          } else {\n            // 当前token无效，尝试刷新\n            const refreshSuccess = await get().refreshAuth();\n            if (!refreshSuccess) {\n              get().clearAuth();\n            }\n          }\n        } catch (error) {\n          console.error('Auth initialization failed:', error);\n          // 尝试刷新token\n          const refreshSuccess = await get().refreshAuth();\n          if (!refreshSuccess) {\n            get().clearAuth();\n          }\n        }\n      }\n    }),\n    {\n      name: 'auth-storage',\n      storage: createJSONStorage(() => localStorage),\n      // 只持久化必要的数据\n      partialize: (state) => ({\n        token: state.token,\n        refreshToken: state.refreshToken,\n        user: state.user,\n        roles: state.roles,\n        permissions: state.permissions,\n        isAuthenticated: state.isAuthenticated\n      }),\n    }\n  )\n);"