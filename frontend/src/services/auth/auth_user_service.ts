/**\n * Auth User Service\n * 用户认证服务 - [services][auth][auth_user_service]\n */\n\nimport { AxiosResponse } from 'axios';\nimport { httpClient } from '../http/http_client';\nimport type { \n  AuthUser, \n  LoginRequest, \n  LoginResponse,\n  RegisterRequest,\n  RefreshTokenRequest,\n  ChangePasswordRequest,\n  ApiResponse \n} from '../../types/auth';\n\nclass AuthUserService {\n  private readonly baseURL = '/auth';\n\n  /**\n   * 用户登录\n   * [services][auth][auth_user_service][login]\n   */\n  async auth_user_service_login(credentials: LoginRequest): Promise<ApiResponse<LoginResponse>> {\n    try {\n      const response: AxiosResponse<ApiResponse<LoginResponse>> = await httpClient.post(\n        `${this.baseURL}/login`,\n        credentials\n      );\n      return response.data;\n    } catch (error) {\n      throw this.auth_user_service_handle_error(error);\n    }\n  }\n\n  /**\n   * 用户注册\n   * [services][auth][auth_user_service][register]\n   */\n  async auth_user_service_register(userData: RegisterRequest): Promise<ApiResponse<void>> {\n    try {\n      const response: AxiosResponse<ApiResponse<void>> = await httpClient.post(\n        `${this.baseURL}/register`,\n        userData\n      );\n      return response.data;\n    } catch (error) {\n      throw this.auth_user_service_handle_error(error);\n    }\n  }\n\n  /**\n   * 用户登出\n   * [services][auth][auth_user_service][logout]\n   */\n  async auth_user_service_logout(): Promise<ApiResponse<void>> {\n    try {\n      const response: AxiosResponse<ApiResponse<void>> = await httpClient.post(\n        `${this.baseURL}/logout`\n      );\n      return response.data;\n    } catch (error) {\n      // 登出失败不抛出错误，允许本地清理\n      console.error('Logout error:', error);\n      return { success: true, data: undefined };\n    }\n  }\n\n  /**\n   * 刷新访问令牌\n   * [services][auth][auth_user_service][refresh_token]\n   */\n  async auth_user_service_refresh_token(refreshToken: string): Promise<ApiResponse<LoginResponse>> {\n    try {\n      const response: AxiosResponse<ApiResponse<LoginResponse>> = await httpClient.post(\n        `${this.baseURL}/refresh`,\n        { refresh_token: refreshToken }\n      );\n      return response.data;\n    } catch (error) {\n      throw this.auth_user_service_handle_error(error);\n    }\n  }\n\n  /**\n   * 获取当前用户信息\n   * [services][auth][auth_user_service][get_current_user]\n   */\n  async auth_user_service_get_current_user(): Promise<ApiResponse<AuthUser>> {\n    try {\n      const response: AxiosResponse<ApiResponse<AuthUser>> = await httpClient.get(\n        `${this.baseURL}/me`\n      );\n      return response.data;\n    } catch (error) {\n      throw this.auth_user_service_handle_error(error);\n    }\n  }\n\n  /**\n   * 更新用户资料\n   * [services][auth][auth_user_service][update_profile]\n   */\n  async auth_user_service_update_profile(profileData: Partial<AuthUser>): Promise<ApiResponse<AuthUser>> {\n    try {\n      const response: AxiosResponse<ApiResponse<AuthUser>> = await httpClient.put(\n        `${this.baseURL}/profile`,\n        profileData\n      );\n      return response.data;\n    } catch (error) {\n      throw this.auth_user_service_handle_error(error);\n    }\n  }\n\n  /**\n   * 修改密码\n   * [services][auth][auth_user_service][change_password]\n   */\n  async auth_user_service_change_password(passwordData: ChangePasswordRequest): Promise<ApiResponse<void>> {\n    try {\n      const response: AxiosResponse<ApiResponse<void>> = await httpClient.put(\n        `${this.baseURL}/change-password`,\n        passwordData\n      );\n      return response.data;\n    } catch (error) {\n      throw this.auth_user_service_handle_error(error);\n    }\n  }\n\n  /**\n   * 发送密码重置邮件\n   * [services][auth][auth_user_service][forgot_password]\n   */\n  async auth_user_service_forgot_password(email: string): Promise<ApiResponse<void>> {\n    try {\n      const response: AxiosResponse<ApiResponse<void>> = await httpClient.post(\n        `${this.baseURL}/forgot-password`,\n        { email }\n      );\n      return response.data;\n    } catch (error) {\n      throw this.auth_user_service_handle_error(error);\n    }\n  }\n\n  /**\n   * 重置密码\n   * [services][auth][auth_user_service][reset_password]\n   */\n  async auth_user_service_reset_password(\n    token: string, \n    newPassword: string\n  ): Promise<ApiResponse<void>> {\n    try {\n      const response: AxiosResponse<ApiResponse<void>> = await httpClient.post(\n        `${this.baseURL}/reset-password`,\n        { \n          token, \n          new_password: newPassword \n        }\n      );\n      return response.data;\n    } catch (error) {\n      throw this.auth_user_service_handle_error(error);\n    }\n  }\n\n  /**\n   * 验证邮箱\n   * [services][auth][auth_user_service][verify_email]\n   */\n  async auth_user_service_verify_email(token: string): Promise<ApiResponse<void>> {\n    try {\n      const response: AxiosResponse<ApiResponse<void>> = await httpClient.post(\n        `${this.baseURL}/verify-email`,\n        { token }\n      );\n      return response.data;\n    } catch (error) {\n      throw this.auth_user_service_handle_error(error);\n    }\n  }\n\n  /**\n   * 重发验证邮件\n   * [services][auth][auth_user_service][resend_verification]\n   */\n  async auth_user_service_resend_verification_email(): Promise<ApiResponse<void>> {\n    try {\n      const response: AxiosResponse<ApiResponse<void>> = await httpClient.post(\n        `${this.baseURL}/resend-verification`\n      );\n      return response.data;\n    } catch (error) {\n      throw this.auth_user_service_handle_error(error);\n    }\n  }\n\n  /**\n   * 设置认证头\n   * [services][auth][auth_user_service][set_auth_header]\n   */\n  auth_user_service_set_auth_header(token: string): void {\n    httpClient.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n  }\n\n  /**\n   * 清除认证头\n   * [services][auth][auth_user_service][clear_auth_header]\n   */\n  auth_user_service_clear_auth_header(): void {\n    delete httpClient.defaults.headers.common['Authorization'];\n  }\n\n  /**\n   * 检查令牌是否有效\n   * [services][auth][auth_user_service][validate_token]\n   */\n  async auth_user_service_validate_token(token: string): Promise<boolean> {\n    try {\n      this.auth_user_service_set_auth_header(token);\n      const response = await this.auth_user_service_get_current_user();\n      return response.success;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  /**\n   * 处理错误\n   * [services][auth][auth_user_service][handle_error]\n   */\n  private auth_user_service_handle_error(error: any): Error {\n    if (error.response?.data?.error?.message) {\n      return new Error(error.response.data.error.message);\n    }\n    \n    if (error.response?.data?.message) {\n      return new Error(error.response.data.message);\n    }\n    \n    if (error.message) {\n      return new Error(error.message);\n    }\n    \n    return new Error('网络错误，请稍后重试');\n  }\n}\n\n// 导出单例实例\nexport const authUserService = new AuthUserService();"