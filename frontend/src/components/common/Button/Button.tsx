/**\n * Custom Button Component\n * 自定义按钮组件 - [components][common][button]\n */\n\nimport React from 'react';\nimport { Button as AntdButton, ButtonProps as AntdButtonProps } from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\nimport classNames from 'classnames';\n\ninterface CustomButtonProps extends Omit<AntdButtonProps, 'loading'> {\n  variant?: 'primary' | 'secondary' | 'success' | 'warning' | 'danger' | 'ghost';\n  loading?: boolean;\n  loadingText?: string;\n  fullWidth?: boolean;\n  rounded?: boolean;\n  elevation?: 'none' | 'low' | 'medium' | 'high';\n}\n\nexport const Button: React.FC<CustomButtonProps> = ({\n  children,\n  variant = 'primary',\n  loading = false,\n  loadingText,\n  fullWidth = false,\n  rounded = false,\n  elevation = 'none',\n  className,\n  disabled,\n  ...props\n}) => {\n  const getButtonType = (): AntdButtonProps['type'] => {\n    switch (variant) {\n      case 'primary':\n        return 'primary';\n      case 'secondary':\n        return 'default';\n      case 'success':\n      case 'warning':\n      case 'danger':\n        return 'primary';\n      case 'ghost':\n        return 'default';\n      default:\n        return 'default';\n    }\n  };\n\n  const getButtonClass = () => {\n    const classes = {\n      'button-success': variant === 'success',\n      'button-warning': variant === 'warning',\n      'button-danger': variant === 'danger',\n      'button-ghost': variant === 'ghost',\n      'button-full-width': fullWidth,\n      'button-rounded': rounded,\n      'button-elevation-low': elevation === 'low',\n      'button-elevation-medium': elevation === 'medium',\n      'button-elevation-high': elevation === 'high',\n    };\n    \n    return classNames(classes, className);\n  };\n\n  const renderLoadingIcon = () => {\n    if (loading) {\n      return <LoadingOutlined />;\n    }\n    return props.icon;\n  };\n\n  const renderChildren = () => {\n    if (loading && loadingText) {\n      return loadingText;\n    }\n    return children;\n  };\n\n  return (\n    <AntdButton\n      {...props}\n      type={getButtonType()}\n      className={getButtonClass()}\n      disabled={disabled || loading}\n      icon={renderLoadingIcon()}\n    >\n      {renderChildren()}\n    </AntdButton>\n  );\n};\n\nexport default Button;"