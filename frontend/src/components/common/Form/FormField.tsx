/**\n * Form Field Component\n * 表单字段组件 - [components][common][form][form_field]\n */\n\nimport React from 'react';\nimport { Form, FormItemProps, Input, Select, Switch, DatePicker, InputNumber, Radio, Checkbox } from 'antd';\nimport { TextAreaProps } from 'antd/es/input';\nimport classNames from 'classnames';\n\ntype FieldType = \n  | 'input'\n  | 'textarea'\n  | 'password'\n  | 'email'\n  | 'number'\n  | 'select'\n  | 'switch'\n  | 'date'\n  | 'datetime'\n  | 'radio'\n  | 'checkbox'\n  | 'custom';\n\ninterface FormFieldProps extends Omit<FormItemProps, 'children'> {\n  fieldType: FieldType;\n  placeholder?: string;\n  options?: Array<{ label: string; value: any; disabled?: boolean }>;\n  customComponent?: React.ReactNode;\n  inputProps?: any;\n  variant?: 'default' | 'filled' | 'borderless';\n  size?: 'small' | 'middle' | 'large';\n}\n\nexport const FormField: React.FC<FormFieldProps> = ({\n  fieldType,\n  placeholder,\n  options = [],\n  customComponent,\n  inputProps = {},\n  variant = 'default',\n  size = 'middle',\n  className,\n  ...formItemProps\n}) => {\n  const getFieldClass = () => {\n    return classNames(\n      'form-field',\n      {\n        'form-field-filled': variant === 'filled',\n        'form-field-borderless': variant === 'borderless',\n      },\n      className\n    );\n  };\n\n  const renderField = () => {\n    const commonProps = {\n      placeholder,\n      size,\n      ...inputProps\n    };\n\n    switch (fieldType) {\n      case 'input':\n        return <Input {...commonProps} />;\n      \n      case 'textarea':\n        return (\n          <Input.TextArea\n            {...commonProps}\n            rows={4}\n            autoSize={{ minRows: 2, maxRows: 6 }}\n          />\n        );\n      \n      case 'password':\n        return (\n          <Input.Password\n            {...commonProps}\n            visibilityToggle\n          />\n        );\n      \n      case 'email':\n        return (\n          <Input\n            {...commonProps}\n            type=\"email\"\n          />\n        );\n      \n      case 'number':\n        return (\n          <InputNumber\n            {...commonProps}\n            style={{ width: '100%' }}\n          />\n        );\n      \n      case 'select':\n        return (\n          <Select\n            {...commonProps}\n            options={options}\n            showSearch\n            filterOption={(input, option) =>\n              (option?.label ?? '').toLowerCase().includes(input.toLowerCase())\n            }\n          />\n        );\n      \n      case 'switch':\n        return (\n          <Switch\n            {...inputProps}\n          />\n        );\n      \n      case 'date':\n        return (\n          <DatePicker\n            {...commonProps}\n            style={{ width: '100%' }}\n          />\n        );\n      \n      case 'datetime':\n        return (\n          <DatePicker\n            {...commonProps}\n            showTime\n            style={{ width: '100%' }}\n          />\n        );\n      \n      case 'radio':\n        return (\n          <Radio.Group\n            {...inputProps}\n            options={options}\n          />\n        );\n      \n      case 'checkbox':\n        if (options.length > 0) {\n          return (\n            <Checkbox.Group\n              {...inputProps}\n              options={options}\n            />\n          );\n        }\n        return (\n          <Checkbox\n            {...inputProps}\n          >\n            {placeholder}\n          </Checkbox>\n        );\n      \n      case 'custom':\n        return customComponent;\n      \n      default:\n        return <Input {...commonProps} />;\n    }\n  };\n\n  return (\n    <Form.Item\n      {...formItemProps}\n      className={getFieldClass()}\n    >\n      {renderField()}\n    </Form.Item>\n  );\n};\n\nexport default FormField;"