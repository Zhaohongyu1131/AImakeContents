/**\n * Custom Table Component\n * 自定义表格组件 - [components][common][table]\n */\n\nimport React, { useState } from 'react';\nimport { Table as AntdTable, TableProps as AntdTableProps, Card, Space, Button, Tooltip } from 'antd';\nimport { ReloadOutlined, DownloadOutlined, SettingOutlined, ExpandOutlined } from '@ant-design/icons';\nimport classNames from 'classnames';\nimport type { PaginatedResponse, PaginationParams } from '../../../services/http';\n\ninterface CustomTableProps<T = any> extends Omit<AntdTableProps<T>, 'dataSource' | 'pagination'> {\n  data?: PaginatedResponse<T>;\n  loading?: boolean;\n  variant?: 'default' | 'card' | 'simple' | 'bordered';\n  density?: 'default' | 'compact' | 'comfortable';\n  showToolbar?: boolean;\n  showRefresh?: boolean;\n  showExport?: boolean;\n  showSettings?: boolean;\n  showFullscreen?: boolean;\n  onRefresh?: () => void;\n  onExport?: () => void;\n  onPaginationChange?: (pagination: PaginationParams) => void;\n  toolbarActions?: React.ReactNode;\n  emptyText?: string;\n}\n\nexport const Table = <T extends Record<string, any> = any>({\n  data,\n  loading = false,\n  variant = 'default',\n  density = 'default',\n  showToolbar = true,\n  showRefresh = true,\n  showExport = false,\n  showSettings = false,\n  showFullscreen = false,\n  onRefresh,\n  onExport,\n  onPaginationChange,\n  toolbarActions,\n  emptyText = '暂无数据',\n  className,\n  ...props\n}: CustomTableProps<T>) => {\n  const [fullscreen, setFullscreen] = useState(false);\n  \n  const getTableClass = () => {\n    const classes = {\n      'table-card': variant === 'card',\n      'table-simple': variant === 'simple',\n      'table-bordered': variant === 'bordered',\n      'table-compact': density === 'compact',\n      'table-comfortable': density === 'comfortable',\n      'table-fullscreen': fullscreen,\n    };\n    \n    return classNames('custom-table', classes, className);\n  };\n\n  const getTableSize = () => {\n    switch (density) {\n      case 'compact':\n        return 'small';\n      case 'comfortable':\n        return 'large';\n      default:\n        return 'middle';\n    }\n  };\n\n  const handlePaginationChange = (page: number, pageSize: number) => {\n    if (onPaginationChange) {\n      onPaginationChange({\n        page,\n        page_size: pageSize\n      });\n    }\n  };\n\n  const renderToolbar = () => {\n    if (!showToolbar) {\n      return null;\n    }\n\n    return (\n      <div className=\"table-toolbar\">\n        <div className=\"table-toolbar-left\">\n          {toolbarActions}\n        </div>\n        <div className=\"table-toolbar-right\">\n          <Space>\n            {showRefresh && (\n              <Tooltip title=\"刷新\">\n                <Button\n                  icon={<ReloadOutlined />}\n                  onClick={onRefresh}\n                  loading={loading}\n                />\n              </Tooltip>\n            )}\n            {showExport && (\n              <Tooltip title=\"导出\">\n                <Button\n                  icon={<DownloadOutlined />}\n                  onClick={onExport}\n                />\n              </Tooltip>\n            )}\n            {showSettings && (\n              <Tooltip title=\"设置\">\n                <Button icon={<SettingOutlined />} />\n              </Tooltip>\n            )}\n            {showFullscreen && (\n              <Tooltip title={fullscreen ? '退出全屏' : '全屏'}>\n                <Button\n                  icon={<ExpandOutlined />}\n                  onClick={() => setFullscreen(!fullscreen)}\n                />\n              </Tooltip>\n            )}\n          </Space>\n        </div>\n      </div>\n    );\n  };\n\n  const renderTable = () => {\n    const tableProps = {\n      ...props,\n      dataSource: data?.items || [],\n      loading,\n      size: getTableSize(),\n      pagination: data?.pagination ? {\n        current: data.pagination.page,\n        pageSize: data.pagination.page_size,\n        total: data.pagination.total,\n        showSizeChanger: true,\n        showQuickJumper: true,\n        showTotal: (total: number, range: [number, number]) =>\n          `第 ${range[0]}-${range[1]} 条，共 ${total} 条`,\n        onChange: handlePaginationChange,\n        onShowSizeChange: handlePaginationChange,\n      } : false,\n      locale: {\n        emptyText,\n      },\n    };\n\n    return (\n      <AntdTable<T>\n        {...tableProps}\n        className={getTableClass()}\n      />\n    );\n  };\n\n  if (variant === 'card') {\n    return (\n      <Card className={fullscreen ? 'table-card-fullscreen' : ''}>\n        {renderToolbar()}\n        {renderTable()}\n      </Card>\n    );\n  }\n\n  return (\n    <div className={fullscreen ? 'table-container-fullscreen' : 'table-container'}>\n      {renderToolbar()}\n      {renderTable()}\n    </div>\n  );\n};\n\nexport default Table;"