/**\n * Route Guards Module\n * 路由守卫模块 - [router][guards]\n */\n\nimport { Navigate, useLocation } from 'react-router-dom';\nimport { ReactNode } from 'react';\nimport { message } from 'antd';\nimport { useAuthStore } from '../stores/auth/auth_user_store';\nimport { LoadingPage } from '../components/common/LoadingPage';\n\ninterface RouteGuardProps {\n  children: ReactNode;\n  requireAuth?: boolean;\n  requireRoles?: string[];\n  requirePermissions?: string[];\n}\n\n/**\n * 认证路由守卫\n * [router][guards][auth_guard]\n */\nexport const AuthGuard: React.FC<RouteGuardProps> = ({ \n  children, \n  requireAuth = true,\n  requireRoles = [],\n  requirePermissions = []\n}) => {\n  const location = useLocation();\n  const { \n    isAuthenticated, \n    user, \n    isLoading,\n    hasRole,\n    hasPermission\n  } = useAuthStore();\n\n  // 正在加载用户信息\n  if (isLoading) {\n    return <LoadingPage />;\n  }\n\n  // 需要认证但未登录\n  if (requireAuth && !isAuthenticated) {\n    message.warning('请先登录');\n    return (\n      <Navigate \n        to=\"/auth/login\" \n        state={{ from: location }} \n        replace \n      />\n    );\n  }\n\n  // 需要特定角色\n  if (requireRoles.length > 0 && !requireRoles.some(role => hasRole(role))) {\n    message.error('您没有访问权限');\n    return <Navigate to=\"/403\" replace />;\n  }\n\n  // 需要特定权限\n  if (requirePermissions.length > 0 && !requirePermissions.some(permission => hasPermission(permission))) {\n    message.error('您没有访问权限');\n    return <Navigate to=\"/403\" replace />;\n  }\n\n  // 检查用户状态\n  if (user && user.status !== 'active') {\n    message.error('账户已被禁用，请联系管理员');\n    return <Navigate to=\"/auth/disabled\" replace />;\n  }\n\n  return <>{children}</>;\n};\n\n/**\n * 游客路由守卫（未登录才能访问）\n * [router][guards][guest_guard]\n */\nexport const GuestGuard: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const { isAuthenticated, isLoading } = useAuthStore();\n\n  // 正在加载用户信息\n  if (isLoading) {\n    return <LoadingPage />;\n  }\n\n  // 已登录用户重定向到首页\n  if (isAuthenticated) {\n    return <Navigate to=\"/\" replace />;\n  }\n\n  return <>{children}</>;\n};\n\n/**\n * 角色守卫组件\n * [router][guards][role_guard]\n */\nexport const RoleGuard: React.FC<{\n  children: ReactNode;\n  roles: string[];\n  fallback?: ReactNode;\n}> = ({ children, roles, fallback }) => {\n  const { hasRole } = useAuthStore();\n\n  if (!roles.some(role => hasRole(role))) {\n    return fallback ? <>{fallback}</> : null;\n  }\n\n  return <>{children}</>;\n};\n\n/**\n * 权限守卫组件\n * [router][guards][permission_guard]\n */\nexport const PermissionGuard: React.FC<{\n  children: ReactNode;\n  permissions: string[];\n  requireAll?: boolean;\n  fallback?: ReactNode;\n}> = ({ children, permissions, requireAll = false, fallback }) => {\n  const { hasPermission } = useAuthStore();\n\n  const hasAccess = requireAll \n    ? permissions.every(permission => hasPermission(permission))\n    : permissions.some(permission => hasPermission(permission));\n\n  if (!hasAccess) {\n    return fallback ? <>{fallback}</> : null;\n  }\n\n  return <>{children}</>;\n};\n\n/**\n * 管理员路由守卫\n * [router][guards][admin_guard]\n */\nexport const AdminGuard: React.FC<{ children: ReactNode }> = ({ children }) => {\n  return (\n    <AuthGuard requireRoles={['admin', 'super_admin']}>\n      {children}\n    </AuthGuard>\n  );\n};\n\n/**\n * 条件路由守卫\n * [router][guards][conditional_guard]\n */\nexport const ConditionalGuard: React.FC<{\n  children: ReactNode;\n  condition: boolean;\n  fallback?: ReactNode;\n  redirectTo?: string;\n}> = ({ children, condition, fallback, redirectTo }) => {\n  if (!condition) {\n    if (redirectTo) {\n      return <Navigate to={redirectTo} replace />;\n    }\n    return fallback ? <>{fallback}</> : null;\n  }\n\n  return <>{children}</>;\n};\n\n/**\n * 功能开关守卫\n * [router][guards][feature_guard]\n */\nexport const FeatureGuard: React.FC<{\n  children: ReactNode;\n  feature: string;\n  fallback?: ReactNode;\n}> = ({ children, feature, fallback }) => {\n  // 这里可以从配置或API获取功能开关状态\n  const isFeatureEnabled = (featureName: string): boolean => {\n    // 示例实现，实际应该从配置服务获取\n    const features = {\n      'voice_clone': true,\n      'image_generation': true,\n      'video_generation': false,\n      'batch_processing': true,\n      'api_access': true\n    };\n    \n    return features[featureName as keyof typeof features] ?? false;\n  };\n\n  if (!isFeatureEnabled(feature)) {\n    return fallback ? <>{fallback}</> : null;\n  }\n\n  return <>{children}</>;\n};"