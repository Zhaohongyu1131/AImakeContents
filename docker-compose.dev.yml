version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: datasay_postgres_dev
    environment:
      POSTGRES_DB: datasay
      POSTGRES_USER: datasayai
      POSTGRES_PASSWORD: datasayai123
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - datasay_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U datasayai -d datasay"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache & Message Broker
  redis:
    image: redis:7-alpine
    container_name: datasay_redis_dev
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - datasay_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: datasay_backend_dev
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - /app/__pycache__
      - backend_storage:/tmp/datasay/storage
    environment:
      - DATABASE_URL=postgresql+asyncpg://datasayai:datasayai123@postgres:5432/datasay
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - DEBUG=True
      - LOG_LEVEL=DEBUG
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - datasay_network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: datasay_celery_worker_dev
    volumes:
      - ./backend:/app
      - backend_storage:/tmp/datasay/storage
    environment:
      - DATABASE_URL=postgresql+asyncpg://datasayai:datasayai123@postgres:5432/datasay
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - LOG_LEVEL=DEBUG
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - datasay_network
    command: celery -A app.config.celery:celery_app_instance worker --loglevel=info --concurrency=2

  # Celery Beat (Scheduler)
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: datasay_celery_beat_dev
    volumes:
      - ./backend:/app
    environment:
      - DATABASE_URL=postgresql+asyncpg://datasayai:datasayai123@postgres:5432/datasay
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - LOG_LEVEL=DEBUG
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - datasay_network
    command: celery -A app.config.celery:celery_app_instance beat --loglevel=info

  # Celery Flower (Monitoring)
  celery_flower:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: datasay_celery_flower_dev
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/1
      - FLOWER_PORT=5555
    depends_on:
      - redis
    networks:
      - datasay_network
    command: celery -A app.config.celery:celery_app_instance flower --port=5555

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_storage:
    driver: local

networks:
  datasay_network:
    driver: bridge